services:
  shortenit:
    image: shortenit:latest
    container_name: shortenit
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      cassandra:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started
    # entrypoint: ["sh", "-c", "sleep 20 && java -jar app.jar"]
    environment:
      SPRING_DATA_CASSANDRA_CONTACT_POINTS: "cassandra"
      SPRING_DATA_CASSANDRA_PORT: "9042"
      SPRING_DATA_CASSANDRA_LOCAL_DATACENTER: "datacenter1"
      SPRING_DATA_CASSANDRA_KEYSPACE_NAME: "shortenit"
      SPRING_DATA_REDIS_HOST: "redis"
      SPRING_DATA_REDIS_PORT: "6379"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:29092"
      SPRING_PROFILES_ACTIVE: docker

  cassandra:
    image: arm64v8/cassandra:latest
    platform: linux/arm64/v8
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_START_RPC: "true"
      
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "DESC KEYSPACES"]
      interval: 10s
      timeout: 5s
      retries: 60

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]

  zookeeper:
    image: arm64v8/zookeeper:latest
    platform: linux/arm64/v8
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: "1"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT_INTERNAL"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_CREATE_TOPICS: "shortenit:1:1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: "kafka:9092"
    
  prometheus:
    extends:
      file: monitoring/docker-compose.monitoring.yml
      service: prometheus
    depends_on:
      - shortenit

  grafana:
    extends:
      file: monitoring/docker-compose.monitoring.yml
      service: grafana
    depends_on:
      - prometheus
